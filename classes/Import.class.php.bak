<?php

namespace OpenFlexImporter;

use OpenFlex_CustomFunctions;

class Import {

    const TABLE_NAME = "openflex_import";
    // Throws an error if one of those fields is empty
    const REQUIRED_FIELDS = [
        'name',
        'regular_price'
    ];
    const REQUIRED_POST_FIELD = [
        //'post_title'
    ];
    // All the basic fields with their setter functions
    const BASIC_FIELDS = [
        'sku' => 'set_sku',
        'name' => 'set_name',
        'description' => 'set_description',
        'short_description' => 'set_short_description',
        'regular_price' => 'set_regular_price',
        'tax_class' => 'set_tax_class'
    ];
    // Complex fields with longer import functions
    const COMPLEX_FIELDS = [
        'image_url' => 'importImage',
        'thumbnail_url' => 'importThumbnail',
        'categories_tree' => 'importCategoriesTree',
        'stock_quantity' => 'setStockQuantity'
    ];
    // Fields used on posts (not Woocommerce products)
    const POST_FIELDS = [
        'post_title',
        'post_name',
        'post_status'
    ];

    protected $id;
    protected $status = 'inprogress';
    protected $date_start;
    protected $date_end;
    protected $file_lines = 0;
    protected $imported_lines = 0;
    protected $partial_lines = 0;
    protected $error_lines = 0;
    protected $ignored_lines = 0;
    public $use_config = 0;

    protected $filename;
    protected $importer;
    protected $counter;
    protected $categories_list;
    protected $is_custom_type = false;

    const STATUS_INPROGRESS = "inprogress";
    const STATUS_DONE = "done";
    const STATUS_FAILED = "failed";

    private static function getTableName() {
        global $wpdb;
        return $wpdb->prefix.static::TABLE_NAME;
    }

    public function __construct($filename, $use_config = 0) {
        $this->filename = $filename;
        $this->date_start = date("Y-m-d H:i:s");
        $this->status = static::STATUS_INPROGRESS;
        $this->use_config = $use_config;

        // Counting rows
        if(!empty($this->filename)) {
            $this->counter = new CsvImporter($this->filename, true);
            $this->file_lines = $this->counter->countRows();
            unset($this->counter);

            $this->importer = new CsvImporter($this->filename, true);
        }
    }

    public static function load($id_import, $use_config = 0) {
        $import = static::getById($id_import);
        if(empty($import['id'])) {
            return new Import(null);
        } else {
            // @TODO - Enregistrer filename en bdd
            //$import_instance = new Import($import['filename']);
            $import_instance = new Import(\ABSPATH.OPENFLEX_CSV_PATH);
            $import_instance->id = $import['id'];
            $import_instance->status = $import['status'];
            $import_instance->date_start = $import['date_start'];
            $import_instance->date_end = $import['date_end'];
            $import_instance->file_lines = $import['file_lines'];
            $import_instance->imported_lines = $import['imported_lines'];
            $import_instance->partial_lines = $import['partial_lines'];
            $import_instance->error_lines = $import['error_lines'];
            $import_instance->ignored_lines = $import['ignored_lines'];
            $import_instance->use_config = $use_config;

            return $import_instance;
        }
    }

    public static function startImport($request = []) {
        try {
            file_put_contents(plugin_dir_path(__FILE__)."ajax_calls.log", "Called now : ".date("Y-m-d H:i:s")."\n", FILE_APPEND);
            file_put_contents(plugin_dir_path(__FILE__)."ajax_calls.log", json_encode($request, JSON_PRETTY_PRINT)."\n", FILE_APPEND);

            // If id_import is sent, we load the import with this id, else we create a new one
            if(!empty($request['id_import'])) {
                $import = static::load($request['id_import'], $request['use_config'] ?? 0);
                $import->importer = new CsvImporter($import->filename, true);
            } else {
                $import = static::newImport($request['use_config'] ?? 0);
            }

            $offset = 0;
            if(!empty($request['offset_import'])) {
                $offset = (int)$request['offset_import'];
            }

            // Lancement de la fonction beforeImport
            if(!$import->id) {
                try {
                    OpenFlex_CustomFunctions::beforeImport($import);
                } catch(\Exception $e) {
                    $import->handleError($e, []);
                }
            }

            // Empêche les boucles infinies via cURL
            if(!in_array($import->status, [static::STATUS_DONE, static::STATUS_FAILED])) {
                $import->import($offset);
            }

            try {
                if(in_array($import->status, [static::STATUS_DONE])) {
                    OpenFlex_CustomFunctions::afterImport($import);
                }
            } catch(\Exception $e) {
                $import->handleError($e, []);
            }
        } catch(\Throwable $e) {
            // @TODO - Logger les grosses erreurs en bdd dans une table openflex_errors
            // Les erreurs concernées seront celles qui font planter l'import avant même qu'il commence
            // Par ex. timeout FTP, fichier pas trouvé, plus de Ram, etc.
            $logfile = plugin_dir_path(__FILE__)."errors.log";
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getMessage()."\n", FILE_APPEND);
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getFile()." : Line ".$e->getLine()."\n", FILE_APPEND);
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getTraceAsString()."\n", FILE_APPEND);
            var_dump($e);
        }
    }

    /**
     * Launches a new import
     */
    public static function newImport($use_config = 0) {
        try {
            $filename = \ABSPATH.OPENFLEX_CSV_PATH;

            // If we have to download the file from a FTP server first
            if(OPENFLEX_USE_FTP) {
                $ftp_config = OPENFLEX_FTP_CONFIGS[$use_config] ?? [];
                if(empty($ftp_config)) {
                    throw new \Exception("Aucune configuration FTP our l'ID {$use_config}");
                }

                // Mise en place d'une connexion basique
                $ftp = ftp_connect($ftp_config['server']);

                // Identification avec un nom d'utilisateur et un mot de passe
                $login_result = ftp_login($ftp, $ftp_config['user'], $ftp_config['password']);
                ftp_pasv($ftp, true);

                // Tentative de téléchargement du fichier $server_file et sauvegarde dans le fichier $local_file
                if (ftp_get($ftp, $filename, $ftp_config['path'], FTP_BINARY)) {
                    echo "Le fichier $filename a été écrit avec succès\n";
                } else {
                    echo "Il y a eu un problème lors de la récupération du fichier sur le FTP\n";
                }

                // Fermeture de la connexion
                ftp_close($ftp);
            }

            var_dump($filename);

            $import = new Import($filename, $use_config);
            $import->save();
            return $import;
        } catch(\Throwable $e) {
            // @TODO - Logger les grosses erreurs en bdd dans une table openflex_errors
            // Les erreurs concernées seront celles qui font planter l'import avant même qu'il commence
            // Par ex. timeout FTP, fichier pas trouvé, plus de Ram, etc.
            $logfile = plugin_dir_path(__FILE__)."errors.log";
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getMessage()."\n", FILE_APPEND);
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getFile()." : Line ".$e->getLine()."\n", FILE_APPEND);
            file_put_contents($logfile, date("Y-m-d H:i:s")." - ".$e->getTraceAsString()."\n", FILE_APPEND);
            var_dump($e);
        }
    }


    public function import($offset = 0) {
        $imported = $this->imported_lines;
        $partial = $this->partial_lines;
        $errors = $this->error_lines;
        $ignored = $this->ignored_lines;

        // If we are not importing Woocommerce products, but posts of a custom type
        if(!in_array(OPENFLEX_POST_TYPE, ["product", "simple", "variable"])) {
            $this->is_custom_type = true;
        }

        $data = $this->importer->get(OPENFLEX_MAX_LINES_LOOP, $offset);
        var_dump($data);
        foreach($data as $row_data) {
            try {
                $product_data = $this->mapData($row_data);

                $result = $this->importProduct($product_data['regular'], $row_data);
                if(!empty($result) && is_array($result) && !empty($result['status'])) {
                    if($result['status'] == "ok") {
                        $imported++;
                        // Import after-save
                        if(!empty($product_data['after']) && !empty($result['id'])) {
                            $this->importProduct($product_data['after'], $row_data, $result['id']);
                        }
                    } elseif($result['status'] == "ignored") {
                        $ignored++;
                    }
                } else {
                    $errors++;
                }
                // @TODO - Supprimer
                //$created_product = \wc_get_product($product_id);
            } catch(\Throwable $e) {
                $errors++;
                $this->handleError($e, $row_data);
            }
        }

        $this->imported_lines = $imported;
        $this->error_lines = $errors;
        $this->ignored_lines = $ignored;
        $this->save();

        // Si on n'a pas fini d'importer, on fait un appel cURL pour continuer l'import
        file_put_contents(plugin_dir_path(__FILE__)."test.log", "-----\n", FILE_APPEND);
        file_put_contents(plugin_dir_path(__FILE__)."test.log", date('Y-m-d H:i:s')."\n", FILE_APPEND);
        file_put_contents(plugin_dir_path(__FILE__)."test.log", "imported : ".$imported."\n", FILE_APPEND);
        file_put_contents(plugin_dir_path(__FILE__)."test.log", "errors : ".$errors."\n", FILE_APPEND);
        file_put_contents(plugin_dir_path(__FILE__)."test.log", "ignored : ".$ignored."\n", FILE_APPEND);
        file_put_contents(plugin_dir_path(__FILE__)."test.log", "this->file_lines : ".$this->file_lines."\n", FILE_APPEND);

        // Si on est en mode autoloop et qu'il reste des lignes à importer
        $parsed_lines = $imported + $errors + $ignored + $offset;
        if(OPENFLEX_AUTOLOOP && ($parsed_lines < $this->file_lines)) {
            $url = \get_site_url(null, 'wp-admin/admin-ajax.php');
            file_put_contents(plugin_dir_path(__FILE__)."test.log", "url : ".$url."\n", FILE_APPEND);
            $id_import = $this->id ?? false;

            // On ne fait l'appel cURL que si l'id_import est renseignée sinon on a une boucle infinie
            if($id_import) {
                $args = [
                    'blocking' => false,
                    'body' => [
                        'action' => 'products_importer_import',
                        'id_import' => $this->id,
                        'offset_import' => $parsed_lines,
                        'use_config' => $this->use_config
                    ]
                ];
                \wp_remote_post($url, $args);
            }
            // $ch = curl_init();
            // curl_setopt($ch, CURLOPT_URL, $url);
            // curl_setopt($ch, CURLOPT_HEADER, TRUE);
            // curl_setopt($ch, CURLOPT_NOBODY, TRUE); // remove body
            // curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
            // $head = curl_exec($ch);
            // $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            // curl_close($ch);
        } else {
            $this->date_end = date("Y-m-d H:i:s");
            $this->status = static::STATUS_DONE;
            $this->save();

            // @TODO - Faire fonctionner. Permet de réindexer FacetWP et clean le cache RocketWP
            // Choppé dans le fichier d'import de Choosit
            if(false) {
                FWP()->indexer->index();

                \WP_CLI::log('Clean Rocket WP cache');
                if (function_exists('rocket_clean_domain')) {
                    rocket_clean_domain();
                }
            }
        }
    }

    /**
     * Maps the data from the CSV with the attributes of a Woocommerce product, following the given structure
     */
    private function mapData($data) {
        $mapped_data = [
            'regular' => [], // Import initial
            'after' => [] // À importer après l'import initial (et donc après la création du produit)
        ];
        foreach($data as $field => $value) {
            // If the column is not mapped we throw a warning
            if(empty(OPENFLEX_CSV_STRUCTURE[$field]) && empty(OPENFLEX_CSV_STRUCTURE_AFTER[$field]) && OPENFLEX_WARN_UNMAPPED) {
                $this->basicWarning("La colonne $field du CSV n'est pas mappée", $data);
            } else {
                if(!empty(OPENFLEX_CSV_STRUCTURE[$field])) {
                    $attribute = OPENFLEX_CSV_STRUCTURE[$field];
                    $mapped_data['regular'][$attribute] = $value;
                }
                if(!empty(OPENFLEX_CSV_STRUCTURE_AFTER[$field])) {
                    $attribute = OPENFLEX_CSV_STRUCTURE_AFTER[$field];
                    $mapped_data['after'][$attribute] = $value;
                }
            }
        }
        // We add the default values
        foreach(OPENFLEX_DEFAULT_VALUES as $field => $value) {
            $mapped_data['regular'][$field] = $value;
        }
        foreach(OPENFLEX_DEFAULT_VALUES_AFTER as $field => $value) {
            $mapped_data['after'][$field] = $value;
        }
        if(!empty(OPENFLEX_DEFAULT_VALUES_CONFIG) && !empty(OPENFLEX_DEFAULT_VALUES_CONFIG[$this->use_config])) {
            foreach(OPENFLEX_DEFAULT_VALUES_CONFIG[$this->use_config] as $field => $value) {
                var_dump([$field => $value]);
                $mapped_data['regular'][$field] = $value;
            }
        }
        if(OPENFLEX_ACTION == "CREATE") {
            $required_fields = $this->is_custom_type ? static::REQUIRED_POST_FIELD : static::REQUIRED_FIELDS;
            foreach($required_fields as $required) {
                if(empty($mapped_data['regular'][$required])) {
                    throw new \Exception("Le champ $required est vide");
                }
            }
        }
        return $mapped_data;
    }

    /* 
     * Custom function for product creation (For Woocommerce 3+ only)
     * Copied from here : https://stackoverflow.com/a/52941994/4840882
     *
     * @param array $args - Data to import
     * @param array $original_data - Original data (as in the CSV file)
     * @param int $product_id - The product ID (null on the original import, not null in the after import)
     */
    private function importProduct($args, $original_data, $product_id = null) {
        $reference_column = OPENFLEX_REFERENCE_COLUMN ?? "sku";
        $product_ref = null;
        $compare = '=';
        if(is_array($reference_column)) {
            $compare = 'IN';
            $product_ref = [];
            foreach($reference_column as $col) {
                $product_ref[] = $original_data[$col];
            }
            if(!preg_match('/acf\:.*/', OPENFLEX_REFERENCE_ATTRIBUTE)) {
                $product_ref = reset($product_ref);
            }
        } else {
            $product_ref = $original_data[$reference_column];
        }
        if(empty($product_ref)) {
            throw new \Exception("Référence produit vide");
        }

        if(!$this->is_custom_type) {
            if(empty($product_id)) {
                // Create or update product based on config
                if(OPENFLEX_ACTION != "CREATE") {
                    if(OPENFLEX_REFERENCE_ATTRIBUTE == "id") {
                        $product_id = $product_ref;
                    } elseif (preg_match('/acf\:.*/', OPENFLEX_REFERENCE_ATTRIBUTE)) {
                        $acf_field = substr(OPENFLEX_REFERENCE_ATTRIBUTE, 4);
                        $query_args = array(
                            'numberposts'	=> 1,
                            'post_type'		=> 'product',
                            'meta_key'		=> $acf_field,
                            'meta_value'	=> $product_ref,
                            'compare'       => $compare
                        );

                        $the_query = new \WP_Query($query_args);
                        $posts = $the_query->posts ?? [];
                        $product = !empty($posts) ? reset($posts) : null;

                        $product_id = $product ? $product->ID : null;
                    } else {
                        // @TODO - Utiliser OPENFLEX_REFERENCE_ATTRIBUTE pour recherche sur le bon paramètre
                        $product_id = \wc_get_product_id_by_sku($product_ref);
                    }

                    if($product_id) {
                        $product = \wc_get_product($product_id);
                    } elseif(OPENFLEX_ACTION == "UPDATE_OR_CREATE") {
                        $product = $this->getProductObjectType($args['type']);
                    }
                } else {
                    // Get an empty instance of the product object (defining it's type)
                    $product = $this->getProductObjectType($args['type']);
                }

                // @TODO - Améliorer la levée d'erreurs
                if(!$product) {
                    if(OPENFLEX_ACTION == "UPDATE") {
                        return ['status' => 'ignored'];
                    } else {
                        try {
                            throw new \Exception("Le produit n'a pas été trouvé et n'a pas pu être créé");
                        } catch(\Exception $e) {
                            $this->handleError($e, $original_data);
                            return ['status' => 'error'];
                        }
                    }
                    return ['status' => 'error'];
                }
            } else {
                $product = \wc_get_product($product_id);
            }
        } else {
            $post_infos = [
                'post_type' => OPENFLEX_POST_TYPE
            ];

            if(empty($product_id)) {
                // Create or update product based on config
                if(OPENFLEX_ACTION != "CREATE") {
                    if(OPENFLEX_REFERENCE_ATTRIBUTE == "id") {
                        $post = get_post($product_ref);
                    } elseif (preg_match('/acf\:.*/', OPENFLEX_REFERENCE_ATTRIBUTE)) {
                        $acf_field = substr(OPENFLEX_REFERENCE_ATTRIBUTE, 4);
                        $query_args = array(
                            'numberposts'	=> 1,
                            'post_type'		=> OPENFLEX_POST_TYPE,
                            'meta_key'		=> $acf_field,
                            'meta_value'	=> $product_ref,
                            'compare'       => $compare
                        );

                        $the_query = new \WP_Query($query_args);
                        $posts = $the_query->posts ?? [];
                        $post = !empty($posts) ? reset($posts) : null;

                        $product_id = $post ? $post->ID : null;
                    }
                    // @TODO - Faire les autres colonnes

                    if(!empty($post)) {
                        $post_infos = [
                            'ID' => $product_id,
                            'post_type' => OPENFLEX_POST_TYPE
                        ];
                    } elseif(OPENFLEX_ACTION == "UPDATE_OR_CREATE") {
                        $post_infos = [
                            'post_type' => OPENFLEX_POST_TYPE
                        ];
                    }
                } else {
                    // Get an empty instance of the product object (defining it's type)
                    $post_infos = [
                        'post_type' => OPENFLEX_POST_TYPE
                    ];
                }

                // @TODO - Améliorer la levée d'erreurs
                if(!$post_infos) {
                    if(OPENFLEX_ACTION == "UPDATE") {
                        return ['status' => 'ignored'];
                    } else {
                        try {
                            throw new \Exception("Le produit n'a pas été trouvé et n'a pas pu être créé");
                        } catch(\Exception $e) {
                            $this->handleError($e, $original_data);
                            return ['status' => 'error'];
                        }
                    }
                    return ['status' => 'error'];
                }
            } else {
                $post_infos = [
                    'ID' => $product_id,
                    'post_type' => OPENFLEX_POST_TYPE
                ];
            }
        }

        // // Product name (Title) and slug
        // $product->set_name($args['name']); // Name (title).

        // // Prices
        // $product->set_regular_price($args['regular_price']);
        // $product->set_sale_price(isset($args['sale_price']) ? $args['sale_price'] : '');
        // $product->set_price(isset($args['sale_price']) ? $args['sale_price'] :  $args['regular_price']);
        // if(isset($args['sale_price'])){
        //     $product->set_date_on_sale_from(isset($args['sale_from']) ? $args['sale_from'] : '');
        //     $product->set_date_on_sale_to(isset($args['sale_to']) ? $args['sale_to'] : '');
        // }

        /*
         * We loop through all the fields and use the corresponding function
         */
        foreach($args as $column => $value) {
            // On ignore les colonnes ignore
            if(strpos($column, "ignore")) {
                continue;
            }
            try {
                if(empty($value)) {
                    if(OPENFLEX_VALUE_IF_EMPTY && !empty(OPENFLEX_VALUE_IF_EMPTY) && isset(OPENFLEX_VALUE_IF_EMPTY[$column])) {
                        $value = OPENFLEX_VALUE_IF_EMPTY[$column];
                    } else {
                        throw new \Exception("La colonne $column est vide");
                    }
                }

                // For each column, we use the corresponding function to correctly import the value
                if(!empty($function = static::BASIC_FIELDS[$column] ?? false)) {
                    $product->$function($value);
                } elseif (!empty($complex_function = static::COMPLEX_FIELDS[$column] ?? false)) {
                    $this->$complex_function($product, $value);
                } elseif ($this->is_custom_type && in_array($column, static::POST_FIELDS)) {
                    $post_infos[$column] = $value;
                } elseif (preg_match('/acf\:.*/', $column)) {
                    $acf_field = substr($column, 4);
                    if(function_exists('update_field')) {
                        $updated = update_field($acf_field, $value, $product_id);
                    }
                } else if(preg_match('/taxonomy\:.*/', $column)) {
                    $taxonomy = substr($column, 9);
                    $term = get_term_by('slug', $value, $taxonomy);
                    if(!empty($term) && !empty($term->term_id)) {
                        wp_set_post_terms($product_id, [(int)$term->term_id], $taxonomy);
                    }
                } else if(preg_match('/function\:.*/', $column)) {
                    $function = substr($column, 9);
                    if(class_exists("OpenFlex_CustomFunctions") && method_exists('OpenFlex_CustomFunctions', $function)) {
                        if($this->is_custom_type) {
                            $post_infos = \OpenFlex_CustomFunctions::$function($post_infos, $product_id, $value, $args, $original_data);
                        } else {
                            $product = \OpenFlex_CustomFunctions::$function($product, $product_id, $value, $args, $original_data);
                        }
                    }
                }
            } catch(\Throwable $e) {
                if(in_array($column, static::REQUIRED_FIELDS)) {
                    $this->handleError($e, $original_data);
                    return ['status' => 'error'];
                } else {
                    $this->handleWarning($e, $original_data);
                }
            }
        }

        // We complete empty values and do other stuff
        if(!$this->is_custom_type) {
            $this->fillMiscData($product, $args);
        }

        ## --- SAVE PRODUCT --- ##
        if($this->is_custom_type) {
            var_dump(">>>>>>>>>>>>>>> POST INFOS");
            var_dump($post_infos);
            if($product_id) {
                wp_update_post($post_infos);
                var_dump("UPDATE XXXXXXXXXXX");
            } else {
                $product_id = wp_insert_post($post_infos);
                var_dump("INSERT XXXXXXXXXXX");
            }
        } else {
            $product_id = $product->save();
        }

        return ['status' => 'ok', 'id' => $product_id];
    }

    // Utility function that returns the correct product object instance
    private function getProductObjectType($type) {
        // Get an instance of the WC_Product object (depending on his type)
        if(isset($args['type']) && $args['type'] === 'variable'){
            $product = new \WC_Product_Variable();
        } elseif(isset($args['type']) && $args['type'] === 'grouped'){
            $product = new \WC_Product_Grouped();
        } elseif(isset($args['type']) && $args['type'] === 'external'){
            $product = new \WC_Product_External();
        } else {
            $product = new \WC_Product_Simple(); // "simple" By default
        } 
        
        if(!is_a($product, 'WC_Product'))
            return false;
        else
            return $product;
    }

    /*
     * Complex import functions
     */
    
    // Utility function that prepare product attributes before saving
    private function prepareProductAttributes($attributes) {
        global $woocommerce;
    
        $data = array();
        $position = 0;
    
        foreach($attributes as $taxonomy => $values){
            if(!\taxonomy_exists($taxonomy))
                continue;
    
            // Get an instance of the WC_Product_Attribute Object
            $attribute = new \WC_Product_Attribute();
    
            $term_ids = array();
    
            // Loop through the term names
            foreach($values['term_names'] as $term_name){
                if(\term_exists($term_name, $taxonomy))
                    // Get and set the term ID in the array from the term name
                    $term_ids[] = \get_term_by('name', $term_name, $taxonomy)->term_id;
                else
                    continue;
            }
    
            $taxonomy_id = \wc_attribute_taxonomy_id_by_name($taxonomy); // Get taxonomy ID
    
            $attribute->set_id($taxonomy_id);
            $attribute->set_name($taxonomy);
            $attribute->set_options($term_ids);
            $attribute->set_position($position);
            $attribute->set_visible($values['is_visible']);
            $attribute->set_variation($values['for_variation']);
    
            $data[$taxonomy] = $attribute; // Set in an array
    
            $position++; // Increase position
        }
        return $data;
    }

    private function importImage($product, $image_url) {
        $image_id = $this->importImageFromUrl($image_url, "product_image");
        $product->set_image_id($image_id);
    }

    private function importThumbnail($product, $image_url) {
        $image_id = $this->importImageFromUrl($image_url, "product_thumbnail");
        $product->set_image_id($image_id);
    }

    /**
     * Imports an image from the given url
     * From https://wordpress.stackexchange.com/a/371360
     * 
     * @param string $image_url - The URL of the image
     * @param $media_type - The type of media (optional)
     * 
     * @return int $image_id - The ID of the image in the wordpress library
     */
    private function importImageFromUrl($image_url, $media_type = null) {
        $image_url = $this->formatMediaUrl($image_url, $media_type);
        $file_array  = [
            'name' => \wp_basename($image_url),
            'tmp_name' => \download_url($image_url)
        ];

        // If error storing temporarily, return the error.
        if (\is_wp_error($file_array['tmp_name'])) {
            @unlink($file_array['tmp_name']);
            return $file_array['tmp_name'];
        }

        // Do the validation and storage stuff.
        $image_id = \media_handle_sideload($file_array, 0);

        // If error storing permanently, unlink.
        if (\is_wp_error($image_id)) {
            @unlink($file_array['tmp_name']);
        }
        return $image_id;
    }

    /**
     * Selects the given categories for the article
     * 
     * @param WC_Product $product - The currently imported product
     * @param string $categories_tree - The list of categories with breadcrumb format
     * (i.e. "Category 1 > Subcategory 1,Category 1 > Subcategory 2")
     */
    private function importCategoriesTree($product, $categories_tree) {
        $trees = explode(\OPENFLEX_CATEGORIES_TREE_SEPARATOR, $categories_tree);

        $category_ids = [];

        foreach($trees as $tree) {
            $categories = explode(\OPENFLEX_CATEGORIES_TREE_BREADCRUMB, $tree);
            // Loop through the hierarchy and find each category or create it
            $categ_id = null;
            foreach($categories as $category) {
                $categ_id = $this->getCategory($category, \OPENFLEX_CATEGORIES_TREE_ATTRIBUTE, $categ_id);
            }
            if($categ_id) {
                $category_ids[] = $categ_id;
            }
        }
        if(!empty($category_ids)) {
            $product->set_category_ids($category_ids);
        }
    }

    /**
     * Fins the category with the given value, for the given attribute
     * 
     * @param string $category - The value to search for (name, slug, etc.)
     * @param string $attribute - The concerned attribute (name, slug, etc.)
     * 
     * @return $categ_id - The ID of the found or created category. Null if not found and not created
     */
    private function getCategory($category, $attribute, $id_parent = null) {
        // Loads the categories list if it is not already done
        if(empty($this->categories_list)) {
            $args = array(
                'taxonomy'   => "product_cat",
                'hide_empty' => false
            );
            $this->categories_list = \get_terms($args);
            $this->categories_list = json_decode(json_encode($this->categories_list ?? []), true); // To array
        }
        // Actually gets the category
        $categ_id = $this->findCategoryId($category, $attribute, $id_parent);

        // If the category is not found and the configuration says to create it, we create it
        if(empty($categ_id) && \OPENFLEX_CATEGORIES_CREATE_IF_NULL) {
            $categ_id = $this->createCategory($category, $id_parent);
        }
        return $categ_id;
    }

    /**
     * Search the categories list for the given column, returns null if not found
     * 
     * @param string $value - The value to search for
     * @param string $column - The concerned column (name / slug / name_to_slug)
     */
    private function findCategoryId($value, $column, $id_parent = null) {
        if($column == "name") {
            $value = htmlspecialchars($value);
        }

        foreach($this->categories_list as $category) {
            if($category[$column] === $value && (!$id_parent || $category['parent'] == $id_parent)) {
                return $category['term_id'];
            }
        }
        return null;
    }

    /**
     * Creates the category with the given name and parent and add it to the categories_list variable
     * 
     * @param string $name - The name of the category (slug will be automatically generated)
     * @param int $id_parent - The ID of the parent
     */
    private function createCategory($name, $id_parent = 0) {
        $slug = \sanitize_title($name);
        $categ_id = \wp_insert_term($name, 'product_cat', array (
            'parent' => $id_parent,
            'slug' => $slug
        ));

        // Catch errors
        if(is_wp_error($categ_id)) {
            throw new \Exception($categ_id->get_error_message());
        } else {
            $categ_id = $categ_id['term_id'];
        }

        // Add the created category to the list
        $this->categories_list[] = [
            'term_id' => $categ_id,
            'name' => $name,
            'slug' => $slug,
            'taxonomy' => 'product_cat',
            'parent' => $id_parent
        ];

        return $categ_id;
    }

    /**
     * Formats the given media URL depending on the config (i.e. transform a relative URL into an absolute one)
     * @TODO - Déplacer dans une classe Helpers
     * 
     * @param $media_url - The URL of the media
     * @param $media_type - The type of media (optional)
     * 
     * @return $url - The absolute full url of the media
     */
    private function formatMediaUrl($media_url, $media_type = null) {
        $url = $media_url;
        if(!\OPENFLEX_MEDIA_ABSOLUTE) {
            if(empty(\OPENFLEX_BASE_URL)) {
                throw new \Exception("La variable de configuration OPENFLEX_BASE_URL n'est pas renseignée, alors qu'elle est nécessaire à cause de OPENFLEX_MEDIA_ABSOLUTE");
            }
            switch(\OPENFLEX_MEDIA_FORMAT) {
                case "magento":
                    $url = $this->formatMagentoMediaUrl($media_url, $media_type);
                    break;
                default:
                    $folder = "";
                    if(!empty($media_type) && !empty(\OPENFLEX_MEDIA_FOLDERS[$media_type])) {
                        $folder = \OPENFLEX_MEDIA_FOLDERS[$media_type];
                    }
                    $url = \OPENFLEX_BASE_URL.$folder.$media_url;
            }
        }

        // We eventually transform the generated URL
        if(!empty(\OPENFLEX_MEDIA_TRANSFORM_URL)) {
            if(\OPENFLEX_MEDIA_TRANSFORM_URL == "uppercase") {
                $url = strtoupper($url);
            } elseif(\OPENFLEX_MEDIA_TRANSFORM_URL == "lowercase") {
                $url = strtolower($url);
            }
        }

        return $url;
    }

    /**
     * Formats the given media url for magento
     * 
     * @param string $media_url - The URL of the media
     * @param string $media_type - The type of media (optional)
     * 
     * @return $url - The URL
     */
    private function formatMagentoMediaUrl($media_url, $media_type = null) {
        switch($media_type) {
            case "product_image":
            case "product_thumbnail":
                $folder = "/pub/media/catalog/product/";
                $folder.= substr($media_url, 0, 1)."/";
                $folder.= substr($media_url, 1, 1)."/";
                $url = \OPENFLEX_BASE_URL.$folder.$media_url;
                break;
            default:
                $url = \OPENFLEX_BASE_URL.$media_url;
        }
        return $url;
    }

    // Fill some columns and do some stuff
    private function fillMiscData($product, $data) {
        // Set the product price as the sale price if defined, else as the regular price
        if(!empty($data['regular_price']) || !empty($data['sale_price'])) {
            $product->set_regular_price($data['regular_price']);
            $product->set_sale_price(isset($data['sale_price']) ? $data['sale_price'] : '');
            $product->set_price(isset($data['sale_price']) ? $data['sale_price'] :  $data['regular_price']);

            if(isset($data['sale_price'])){
                $product->set_date_on_sale_from(isset($data['sale_from']) ? $data['sale_from'] : '');
                $product->set_date_on_sale_to(isset($data['sale_to']) ? $data['sale_to'] : '');
            }
        }
    }

    // Sets the stock quantity and the correct stock status
    private function setStockQuantity($product, $data) {
        // @TODO - Mettre ça dans une variable de config et l'appliquer à toutes la lignes
        // comme ça on pourra un faire un import avec que des articles virtuels en mettant la config à false
        //$product->set_manage_stock(true);
        $product->set_stock_status($data['stock_quantity'] && $data['stock_quantity'] > 0 ? 'instock' : 'outofstock');
        $product->set_stock_quantity($data['stock_quantity']);
        // @TODO - Implémenter
        //$product->set_backorders(isset($args['backorders']) ? $args['backorders'] : 'no'); // 'yes', 'no' or 'notify'
    }

    public function toArray() {
        return [
            'id' => $this->id,
            'status' => $this->status,
            'date_start' => $this->date_start,
            'date_end' => $this->date_end,
            'file_lines' => $this->file_lines,
            'imported_lines' => $this->imported_lines,
            'partial_lines' => $this->partial_lines,
            'error_lines' => $this->error_lines,
            'ignored_lines' => $this->ignored_lines
        ];
    }

    /**
     * Saves the import informations into the database
     */
    public function save() {
        global $wpdb;
        if($this->id) {
            $wpdb->update(static::getTableName(), $this->toArray(), ['id' => $this->id]);
        } else {
            $wpdb->insert(static::getTableName(), $this->toArray());
            $this->id = $wpdb->insert_id;
        }
    }

    function basicWarning($message, $data) {
        $warning = new ImportError($this->id, 'warning', json_encode(['message' => $message]), json_encode($data));
        $warning->save();
    }

    /**
     * Handles the minor exceptions (i.e. product description is empty)
     * 
     * 
     * @param Throwable $error - The thrown error
     * @param array $data - The original line data
     */
    function handleWarning($error, $data) {
        $error_detail = [
            'message' => $error->getMessage(),
            'file' => $error->getFile(),
            'line' => $error->getLine(),
            'trace' => $error->getTraceAsString()
        ];
        $warning = new ImportError($this->id, 'warning', json_encode($error_detail), json_encode($data));
        $warning->save();
    }

    /**
     * Handles the line major exceptions, which do not create / update the product
     * (i.e. product price is null or zero)
     * 
     * @param Throwable $error - The thrown error
     * @param array $data - The original line data
     */
    function handleError($error, $data) {
        $error_detail = [
            'message' => $error->getMessage(),
            'file' => $error->getFile(),
            'line' => $error->getLine(),
            'trace' => $error->getTraceAsString()
        ];
        $error = new ImportError($this->id, 'error', json_encode($error_detail), json_encode($data));
        $error->save();
    }

    public static function getAll() {
        global $wpdb;

        return $wpdb->get_results("SELECT * FROM ".self::getTableName()." ORDER BY date_start DESC", \ARRAY_A);
    }

    public static function getById($id) {
        global $wpdb;

        return $wpdb->get_row($wpdb->prepare("SELECT * FROM ".self::getTableName()." WHERE id = %s", $id), \ARRAY_A);
    }
}

?>